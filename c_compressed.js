// Do not edit this file; automatically generated by build.py.
'use strict';


Blockly.C = new Blockly.Generator("C");
Blockly.C.addReservedWords("auto,break,case,char,const,continue,default,do,double,else,enum,extern,float,for,goto,if,int,long,register,return,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile,while,asm,bool,catch,class,const_cast,delete,dynamic,cast,explicit,false,friend,inline,mutable,namespace,new,operator,private,public,protected,reinterpret_cast,static_cast,template,this,throw,true,try,typeid,typename,using,virtual,wchar_t,and,and_eq,bitand,bitor,compl,no,not_eq,or,or_eq,xor,xor_eq,cin,cout,endl,include,INT_MIN,INT_MAX,iomanip,iostream,main,MAX_RAND,npos,NULL,std,string,std::string, vector, std::vector");

Blockly.C.ORDER_ATOMIC = 0;
Blockly.C.ORDER_UNARY_POSTFIX = 1;
Blockly.C.ORDER_UNARY_PREFIX = 2;
Blockly.C.ORDER_MULTIPLICATIVE = 3;
Blockly.C.ORDER_ADDITIVE = 4;
Blockly.C.ORDER_SHIFT = 5;
Blockly.C.ORDER_BITWISE_AND = 6;
Blockly.C.ORDER_BITWISE_XOR = 7;
Blockly.C.ORDER_BITWISE_OR = 8;
Blockly.C.ORDER_RELATIONAL = 9;
Blockly.C.ORDER_EQUALITY = 10;
Blockly.C.ORDER_LOGICAL_AND = 11;
Blockly.C.ORDER_LOGICAL_OR = 12;
Blockly.C.ORDER_IF_NULL = 13;
Blockly.C.ORDER_CONDITIONAL = 14;
Blockly.C.ORDER_CASCADE = 15;
Blockly.C.ORDER_ASSIGNMENT = 16;
Blockly.C.ORDER_NONE = 99;

Blockly.C.init = function(a) {
	Blockly.C.definitions_ = Object.create(null);
	Blockly.C.functionNames_ = Object.create(null);
	Blockly.C.variableDB_ ? Blockly.C.variableDB_.reset() : Blockly.C.variableDB_ = new Blockly.Names(Blockly.C.RESERVED_WORDS_);
	Blockly.C.variableDB_.setVariableMap(a.getVariableMap());
	for (var b = [], c = Blockly.Variables.allDeveloperVariables(a), d = 0; d < c.length; d++)
		b.push(Blockly.C.variableDB_.getName(c[d], Blockly.Names.DEVELOPER_VARIABLE_TYPE));
	a = Blockly.Variables.allUsedVarModels(a);
	for (d = 0; d < a.length; d++) b.push(Blockly.C.variableDB_.getName(a[d].getId(), Blockly.Variables.NAME_TYPE));
	//b.length&&(Blockly.C.definitions_.variables="var "+b.join(", ")+";")
};


Blockly.C.finish = function(a) {
	var b = [],
		c;
	for (c in Blockly.C.definitions_) b.push(Blockly.C.definitions_[c]);
	delete Blockly.C.definitions_;
	delete Blockly.C.functionNames_;
	Blockly.C.variableDB_.reset();
	return b.join("\n\n") + "\n\n\n" + a
};

Blockly.C.scrubNakedValue = function(a) {
	return a + ";\n"
};

Blockly.C.quote_ = function(a) {
	a = a.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/'/g, "\\'");
	return "'" + a + "'"
};


Blockly.C.multiline_quote_ = function(a) {
	a = a.replace(/'''/g, "\\'\\'\\'");
	return "'''" + a + "'''"
};


Blockly.C.scrub_ = function(a, b, c) {
	var d = "";
	if (!a.outputConnection || !a.outputConnection.targetConnection) {
		var e = a.getCommentText();
		e && (e = Blockly.utils.string.wrap(e, Blockly.C.COMMENT_WRAP - 3), d = a.getProcedureDef ? d + Blockly.C.prefixLines(e + "\n", "/// ") : d + Blockly.C.prefixLines(e + "\n", "// "));
		for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type == Blockly.INPUT_VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = Blockly.C.allNestedComments(e)) && (d += Blockly.C.prefixLines(e, "// "))
	}
	a = a.nextConnection && a.nextConnection.targetBlock();
	c = c ? "" : Blockly.C.blockToCode(a);
	return d + b + c
};

Blockly.C.getAdjusted = function(a, b, c, d, e) {
	c = c || 0;
	e = e || Blockly.C.ORDER_NONE;
	a.workspace.options.oneBasedIndex && c--;
	var f = a.workspace.options.oneBasedIndex ? "1" : "0";
	a = c ? Blockly.C.valueToCode(a, b, Blockly.C.ORDER_ADDITIVE) || f : d ? Blockly.C.valueToCode(a, b, Blockly.C.ORDER_UNARY_PREFIX) || f : Blockly.C.valueToCode(a, b, e) || f;
	if (Blockly.isNumber(a)) a = parseInt(a, 10) + c, d && (a = -a);
	else {
		if (0 < c) {
			a = a + " + " + c;
			var g = Blockly.C.ORDER_ADDITIVE
		}
		else 0 > c && (a = a + " - " + -c, g = Blockly.C.ORDER_ADDITIVE);
		d && (a = c ? "-(" + a + ")" : "-" + a, g = Blockly.C.ORDER_UNARY_PREFIX);
		g = Math.floor(g);
		e = Math.floor(e);
		g && e >= g && (a = "(" + a + ")")
	}
	return a
};

Blockly.C.colour = {

};

Blockly.C.addReservedWords("Math");

Blockly.C.colour_picker = function(a) {
	return [Blockly.C.quote_(a.getFieldValue("COLOUR")), Blockly.C.ORDER_ATOMIC]
};


Blockly.C.colour_random = function(a) {
	Blockly.C.definitions_.import_C_math = "#include <cmath>";

	return [Blockly.C.provideFunction_("colour_random", ["String " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "() {", "  String hex = '0123456789abcdef';", "  var rnd = new Math.Random();", "  return '#${hex	[rnd.nextInt(16)]}${hex[rnd.nextInt(16)]}'", "      '${hex[rnd.nextInt(16)]}${hex[rnd.nextInt(16)]}'", "      '${hex[rnd.nextInt(16)]}${hex[rnd.nextInt(16)]}';", "}"]) + "()", Blockly.C.ORDER_UNARY_POSTFIX]
};

Blockly.C.colour_rgb = function(a) {
	var b = Blockly.C.valueToCode(a, "RED", Blockly.C.ORDER_NONE) || 0,
		c = Blockly.C.valueToCode(a, "GREEN", Blockly.C.ORDER_NONE) || 0;
	a = Blockly.C.valueToCode(a, "BLUE", Blockly.C.ORDER_NONE) || 0;
	Blockly.C.definitions_.import_C_math = "#include <cmath>' as Math;";
	return [Blockly.C.provideFunction_("colour_rgb", ["String " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(num r, num g, num b) {", "  num rn = (Math.max(Math.min(r, 100), 0) * 2.55).round();", "  String rs = rn.toInt().toRadixString(16);",
		"  rs = '0$rs';", "  rs = rs.substring(rs.length - 2);", "  num gn = (Math.max(Math.min(g, 100), 0) * 2.55).round();", "  String gs = gn.toInt().toRadixString(16);", "  gs = '0$gs';", "  gs = gs.substring(gs.length - 2);", "  num bn = (Math.max(Math.min(b, 100), 0) * 2.55).round();", "  String bs = bn.toInt().toRadixString(16);", "  bs = '0$bs';", "  bs = bs.substring(bs.length - 2);", "  return '#$rs$gs$bs';", "}"
	]) + "(" + b + ", " + c + ", " + a + ")", Blockly.C.ORDER_UNARY_POSTFIX]
};


Blockly.C.colour_blend = function(a) {
	var b = Blockly.C.valueToCode(a, "COLOUR1", Blockly.C.ORDER_NONE) || "'#000000'",
		c = Blockly.C.valueToCode(a, "COLOUR2", Blockly.C.ORDER_NONE) || "'#000000'";
	a = Blockly.C.valueToCode(a, "RATIO", Blockly.C.ORDER_NONE) || .5;
	Blockly.C.definitions_.import_C_math = "#include <cmath>";
	return [Blockly.C.provideFunction_("colour_blend", ["String " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(String c1, String c2, num ratio) {", "  ratio = Math.max(Math.min(ratio, 1), 0);",
		"  int r1 = int.parse('0x${c1.substring(1, 3)}');", "  int g1 = int.parse('0x${c1.substring(3, 5)}');", "  int b1 = int.parse('0x${c1.substring(5, 7)}');", "  int r2 = int.parse('0x${c2.substring(1, 3)}');", "  int g2 = int.parse('0x${c2.substring(3, 5)}');", "  int b2 = int.parse('0x${c2.substring(5, 7)}');", "  num rn = (r1 * (1 - ratio) + r2 * ratio).round();", "  String rs = rn.toInt().toRadixString(16);", "  num gn = (g1 * (1 - ratio) + g2 * ratio).round();", "  String gs = gn.toInt().toRadixString(16);",
		"  num bn = (b1 * (1 - ratio) + b2 * ratio).round();", "  String bs = bn.toInt().toRadixString(16);", "  rs = '0$rs';", "  rs = rs.substring(rs.length - 2);", "  gs = '0$gs';", "  gs = gs.substring(gs.length - 2);", "  bs = '0$bs';", "  bs = bs.substring(bs.length - 2);", "  return '#$rs$gs$bs';", "}"
	]) + "(" + b + ", " + c + ", " + a + ")", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.lists = {};
Blockly.C.addReservedWords("Math");
Blockly.C.lists_create_empty = function(a) {
	return ["[]", Blockly.C.ORDER_ATOMIC]
};
Blockly.C.lists_create_with = function(a) {
	for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.C.valueToCode(a, "ADD" + c, Blockly.C.ORDER_NONE) || "null";
	return ["[" + b.join(", ") + "]", Blockly.C.ORDER_ATOMIC]
};


Blockly.C.lists_repeat = function(a) {
	var b = Blockly.C.valueToCode(a, "ITEM", Blockly.C.ORDER_NONE) || "null";
	return ["new List.filled(" + (Blockly.C.valueToCode(a, "NUM", Blockly.C.ORDER_NONE) || "0") + ", " + b + ")", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.lists_length = function(a) {
	return [(Blockly.C.valueToCode(a, "VALUE", Blockly.C.ORDER_UNARY_POSTFIX) || "[]") + ".length", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.lists_isEmpty = function(a) {
	return [(Blockly.C.valueToCode(a, "VALUE", Blockly.C.ORDER_UNARY_POSTFIX) || "[]") + ".isEmpty", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.lists_indexOf = function(a) {
	var b = "FIRST" == a.getFieldValue("END") ? "indexOf" : "lastIndexOf",
		c = Blockly.C.valueToCode(a, "FIND", Blockly.C.ORDER_NONE) || "''";
	b = (Blockly.C.valueToCode(a, "VALUE", Blockly.C.ORDER_UNARY_POSTFIX) || "[]") + "." + b + "(" + c + ")";
	return a.workspace.options.oneBasedIndex ? [b + " + 1", Blockly.C.ORDER_ADDITIVE] : [b, Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.lists_getIndex = function(a) {
	function b() {
		var a = Blockly.C.variableDB_.getDistinctName("tmp_list", Blockly.Variables.NAME_TYPE),
			b = "List " + a + " = " + e + ";\n";
		e = a;
		return b
	}
	var c = a.getFieldValue("MODE") || "GET",
		d = a.getFieldValue("WHERE") || "FROM_START",
		e = Blockly.C.valueToCode(a, "VALUE", "RANDOM" == d || "FROM_END" == d ? Blockly.C.ORDER_NONE : Blockly.C.ORDER_UNARY_POSTFIX) || "[]";
	if (("RANDOM" != d || "REMOVE" != c) && "FROM_END" != d || e.match(/^\w+$/)) switch (d) {
		case "FIRST":
			if ("GET" == c) return [e + ".first",
				Blockly.C.ORDER_UNARY_POSTFIX
			];
			if ("GET_REMOVE" == c) return [e + ".removeAt(0)", Blockly.C.ORDER_UNARY_POSTFIX];
			if ("REMOVE" == c) return e + ".removeAt(0);\n";
			break;
		case "LAST":
			if ("GET" == c) return [e + ".last", Blockly.C.ORDER_UNARY_POSTFIX];
			if ("GET_REMOVE" == c) return [e + ".removeLast()", Blockly.C.ORDER_UNARY_POSTFIX];
			if ("REMOVE" == c) return e + ".removeLast();\n";
			break;
		case "FROM_START":
			d = Blockly.C.getAdjusted(a, "AT");
			if ("GET" == c) return [e + "[" + d + "]", Blockly.C.ORDER_UNARY_POSTFIX];
			if ("GET_REMOVE" == c) return [e +
				".removeAt(" + d + ")", Blockly.C.ORDER_UNARY_POSTFIX
			];
			if ("REMOVE" == c) return e + ".removeAt(" + d + ");\n";
			break;
		case "FROM_END":
			d = Blockly.C.getAdjusted(a, "AT", 1, !1, Blockly.C.ORDER_ADDITIVE);
			if ("GET" == c) return [e + "[" + e + ".length - " + d + "]", Blockly.C.ORDER_UNARY_POSTFIX];
			if ("GET_REMOVE" == c || "REMOVE" == c) {
				a = e + ".removeAt(" + e + ".length - " + d + ")";
				if ("GET_REMOVE" == c) return [a, Blockly.C.ORDER_UNARY_POSTFIX];
				if ("REMOVE" == c) return a + ";\n"
			}
			break;
		case "RANDOM":
			Blockly.C.definitions_.import_C_math = "#include <cmath>";
			if ("REMOVE" == c) return c = Blockly.C.variableDB_.getDistinctName("tmp_x", Blockly.Variables.NAME_TYPE), "int " + c + " = new Math.Random().nextInt(" + e + ".length);\n" + (e + ".removeAt(" + c + ");\n");
			if ("GET" == c) return c = Blockly.C.provideFunction_("lists_get_random_item", ["dynamic " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List my_list) {", "  int x = new Math.Random().nextInt(my_list.length);", "  return my_list[x];", "}"]), [c + "(" + e + ")", Blockly.C.ORDER_UNARY_POSTFIX];
			if ("GET_REMOVE" == c) return c = Blockly.C.provideFunction_("lists_remove_random_item",
				["dynamic " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List my_list) {", "  int x = new Math.Random().nextInt(my_list.length);", "  return my_list.removeAt(x);", "}"]), [c + "(" + e + ")", Blockly.C.ORDER_UNARY_POSTFIX]
	}
	else {
		if ("RANDOM" == d) return Blockly.C.definitions_.import_C_math = "#include <cmath>", a = b(), c = Blockly.C.variableDB_.getDistinctName("tmp_x", Blockly.Variables.NAME_TYPE), a + ("int " + c + " = new Math.Random().nextInt(" + e + ".length);\n") + (e + ".removeAt(" + c + ");\n");
		if ("REMOVE" == c) return d =
			Blockly.C.getAdjusted(a, "AT", 1, !1, Blockly.C.ORDER_ADDITIVE), a = b(), a += e + ".removeAt(" + e + ".length - " + d + ");\n";
		if ("GET" == c) return d = Blockly.C.getAdjusted(a, "AT", 1), c = Blockly.C.provideFunction_("lists_get_from_end", ["dynamic " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List my_list, num x) {", "  x = my_list.length - x;", "  return my_list[x];", "}"]), [c + "(" + e + ", " + d + ")", Blockly.C.ORDER_UNARY_POSTFIX];
		if ("GET_REMOVE" == c) return d = Blockly.C.getAdjusted(a, "AT", 1), c = Blockly.C.provideFunction_("lists_remove_from_end",
			["dynamic " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List my_list, num x) {", "  x = my_list.length - x;", "  return my_list.removeAt(x);", "}"]), [c + "(" + e + ", " + d + ")", Blockly.C.ORDER_UNARY_POSTFIX]
	}
	throw Error("Unhandled combination (lists_getIndex).");
};
Blockly.C.lists_setIndex = function(a) {
	function b() {
		if (e.match(/^\w+$/)) return "";
		var a = Blockly.C.variableDB_.getDistinctName("tmp_list", Blockly.Variables.NAME_TYPE),
			b = "List " + a + " = " + e + ";\n";
		e = a;
		return b
	}
	var c = a.getFieldValue("MODE") || "GET",
		d = a.getFieldValue("WHERE") || "FROM_START",
		e = Blockly.C.valueToCode(a, "LIST", Blockly.C.ORDER_UNARY_POSTFIX) || "[]",
		f = Blockly.C.valueToCode(a, "TO", Blockly.C.ORDER_ASSIGNMENT) || "null";
	switch (d) {
		case "FIRST":
			if ("SET" == c) return e + "[0] = " + f + ";\n";
			if ("INSERT" ==
				c) return e + ".insert(0, " + f + ");\n";
			break;
		case "LAST":
			if ("SET" == c) return a = b(), a + (e + "[" + e + ".length - 1] = " + f + ";\n");
			if ("INSERT" == c) return e + ".add(" + f + ");\n";
			break;
		case "FROM_START":
			d = Blockly.C.getAdjusted(a, "AT");
			if ("SET" == c) return e + "[" + d + "] = " + f + ";\n";
			if ("INSERT" == c) return e + ".insert(" + d + ", " + f + ");\n";
			break;
		case "FROM_END":
			d = Blockly.C.getAdjusted(a, "AT", 1, !1, Blockly.C.ORDER_ADDITIVE);
			a = b();
			if ("SET" == c) return a + (e + "[" + e + ".length - " + d + "] = " + f + ";\n");
			if ("INSERT" == c) return a + (e + ".insert(" +
				e + ".length - " + d + ", " + f + ");\n");
			break;
		case "RANDOM":
			Blockly.C.definitions_.import_C_math = "#include <cmath>";
			a = b();
			d = Blockly.C.variableDB_.getDistinctName("tmp_x", Blockly.Variables.NAME_TYPE);
			a += "int " + d + " = new Math.Random().nextInt(" + e + ".length);\n";
			if ("SET" == c) return a + (e + "[" + d + "] = " + f + ";\n");
			if ("INSERT" == c) return a + (e + ".insert(" + d + ", " + f + ");\n")
	}
	throw Error("Unhandled combination (lists_setIndex).");
};
Blockly.C.lists_getSublist = function(a) {
	var b = Blockly.C.valueToCode(a, "LIST", Blockly.C.ORDER_UNARY_POSTFIX) || "[]",
		c = a.getFieldValue("WHERE1"),
		d = a.getFieldValue("WHERE2");
	if (b.match(/^\w+$/) || "FROM_END" != c && "FROM_START" == d) {
		switch (c) {
			case "FROM_START":
				var e = Blockly.C.getAdjusted(a, "AT1");
				break;
			case "FROM_END":
				e = Blockly.C.getAdjusted(a, "AT1", 1, !1, Blockly.C.ORDER_ADDITIVE);
				e = b + ".length - " + e;
				break;
			case "FIRST":
				e = "0";
				break;
			default:
				throw Error("Unhandled option (lists_getSublist).");
		}
		switch (d) {
			case "FROM_START":
				var f =
					Blockly.C.getAdjusted(a, "AT2", 1);
				break;
			case "FROM_END":
				f = Blockly.C.getAdjusted(a, "AT2", 0, !1, Blockly.C.ORDER_ADDITIVE);
				f = b + ".length - " + f;
				break;
			case "LAST":
				break;
			default:
				throw Error("Unhandled option (lists_getSublist).");
		}
		a = "LAST" == d ? b + ".sublist(" + e + ")" : b + ".sublist(" + e + ", " + f + ")"
	}
	else e = Blockly.C.getAdjusted(a, "AT1"), f = Blockly.C.getAdjusted(a, "AT2"), a = Blockly.C.provideFunction_("lists_get_sublist", ["List " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List list, String where1, num at1, String where2, num at2) {",
		"  int getAt(String where, num at) {", "    if (where == 'FROM_END') {", "      at = list.length - 1 - at;", "    } else if (where == 'FIRST') {", "      at = 0;", "    } else if (where == 'LAST') {", "      at = list.length - 1;", "    } else if (where != 'FROM_START') {", "      throw 'Unhandled option (lists_getSublist).';", "    }", "    return at;", "  }", "  at1 = getAt(where1, at1);", "  at2 = getAt(where2, at2) + 1;", "  return list.sublist(at1, at2);", "}"
	]) + "(" + b + ", '" + c + "', " + e + ", '" + d + "', " + f + ")";
	return [a,
		Blockly.C.ORDER_UNARY_POSTFIX
	]
};
Blockly.C.lists_sort = function(a) {
	var b = Blockly.C.valueToCode(a, "LIST", Blockly.C.ORDER_NONE) || "[]",
		c = "1" === a.getFieldValue("DIRECTION") ? 1 : -1;
	a = a.getFieldValue("TYPE");
	return [Blockly.C.provideFunction_("lists_sort", ["List " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List list, String type, int direction) {", "  var compareFuncs = {", '    "NUMERIC": (a, b) => (direction * a.compareTo(b)).toInt(),', '    "TEXT": (a, b) => direction * a.toString().compareTo(b.toString()),', '    "IGNORE_CASE": ',
		"       (a, b) => direction * ", "      a.toString().toLowerCase().compareTo(b.toString().toLowerCase())", "  };", "  list = new List.from(list);", "  var compare = compareFuncs[type];", "  list.sort(compare);", "  return list;", "}"
	]) + "(" + b + ', "' + a + '", ' + c + ")", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.lists_split = function(a) {
	var b = Blockly.C.valueToCode(a, "INPUT", Blockly.C.ORDER_UNARY_POSTFIX),
		c = Blockly.C.valueToCode(a, "DELIM", Blockly.C.ORDER_NONE) || "''";
	a = a.getFieldValue("MODE");
	if ("SPLIT" == a) b || (b = "''"), a = "split";
	else if ("JOIN" == a) b || (b = "[]"), a = "join";
	else throw Error("Unknown mode: " + a);
	return [b + "." + a + "(" + c + ")", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.lists_reverse = function(a) {
	return ["new List.from(" + (Blockly.C.valueToCode(a, "LIST", Blockly.C.ORDER_NONE) || "[]") + ".reversed)", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.logic = {};
Blockly.C.controls_if = function(a) {
	var b = 0,
		c = "";
	Blockly.C.STATEMENT_PREFIX && (c += Blockly.C.injectId(Blockly.C.STATEMENT_PREFIX, a));
	do {
		var d = Blockly.C.valueToCode(a, "IF" + b, Blockly.C.ORDER_NONE) || "false";
		var e = Blockly.C.statementToCode(a, "DO" + b);
		Blockly.C.STATEMENT_SUFFIX && (e = Blockly.C.prefixLines(Blockly.C.injectId(Blockly.C.STATEMENT_SUFFIX, a), Blockly.C.INDENT) + e);
		c += (0 < b ? "else " : "") + "if (" + d + ") {\n" + e + "}";
		++b
	} while (a.getInput("IF" + b));
	if (a.getInput("ELSE") || Blockly.C.STATEMENT_SUFFIX) e =
		Blockly.C.statementToCode(a, "ELSE"), Blockly.C.STATEMENT_SUFFIX && (e = Blockly.C.prefixLines(Blockly.C.injectId(Blockly.C.STATEMENT_SUFFIX, a), Blockly.C.INDENT) + e), c += " else {\n" + e + "}";
	return c + "\n"
};
Blockly.C.controls_ifelse = Blockly.C.controls_if;
Blockly.C.logic_compare = function(a) {
	var b = {
			EQ: "==",
			NEQ: "!=",
			LT: "<",
			LTE: "<=",
			GT: ">",
			GTE: ">="
		} [a.getFieldValue("OP")],
		c = "==" == b || "!=" == b ? Blockly.C.ORDER_EQUALITY : Blockly.C.ORDER_RELATIONAL,
		d = Blockly.C.valueToCode(a, "A", c) || "0";
	a = Blockly.C.valueToCode(a, "B", c) || "0";
	return [d + " " + b + " " + a, c]
};
Blockly.C.logic_operation = function(a) {
	var b = "AND" == a.getFieldValue("OP") ? "&&" : "||",
		c = "&&" == b ? Blockly.C.ORDER_LOGICAL_AND : Blockly.C.ORDER_LOGICAL_OR,
		d = Blockly.C.valueToCode(a, "A", c);
	a = Blockly.C.valueToCode(a, "B", c);
	if (d || a) {
		var e = "&&" == b ? "true" : "false";
		d || (d = e);
		a || (a = e)
	}
	else a = d = "false";
	return [d + " " + b + " " + a, c]
};
Blockly.C.logic_negate = function(a) {
	var b = Blockly.C.ORDER_UNARY_PREFIX;
	return ["!" + (Blockly.C.valueToCode(a, "BOOL", b) || "true"), b]
};
Blockly.C.logic_boolean = function(a) {
	return ["TRUE" == a.getFieldValue("BOOL") ? "true" : "false", Blockly.C.ORDER_ATOMIC]
};
Blockly.C.logic_null = function(a) {
	return ["null", Blockly.C.ORDER_ATOMIC]
};
Blockly.C.logic_ternary = function(a) {
	var b = Blockly.C.valueToCode(a, "IF", Blockly.C.ORDER_CONDITIONAL) || "false",
		c = Blockly.C.valueToCode(a, "THEN", Blockly.C.ORDER_CONDITIONAL) || "null";
	a = Blockly.C.valueToCode(a, "ELSE", Blockly.C.ORDER_CONDITIONAL) || "null";
	return [b + " ? " + c + " : " + a, Blockly.C.ORDER_CONDITIONAL]
};
Blockly.C.loops = {};
Blockly.C.controls_repeat_ext = function(a) {
	var b = a.getField("TIMES") ? String(Number(a.getFieldValue("TIMES"))) : Blockly.C.valueToCode(a, "TIMES", Blockly.C.ORDER_ASSIGNMENT) || "0",
		c = Blockly.C.statementToCode(a, "DO");
	c = Blockly.C.addLoopTrap(c, a);
	a = "";
	var d = Blockly.C.variableDB_.getDistinctName("count", Blockly.Variables.NAME_TYPE),
		e = b;
	b.match(/^\w+$/) || Blockly.isNumber(b) || (e = Blockly.C.variableDB_.getDistinctName("repeat_end", Blockly.Variables.NAME_TYPE), a += "var " + e + " = " + b + ";\n");
	return a +
		("for (int " + d + " = 0; " + d + " < " + e + "; " + d + "++) {\n" + c + "}\n")
};
Blockly.C.controls_repeat = Blockly.C.controls_repeat_ext;
Blockly.C.controls_whileUntil = function(a) {
	var b = "UNTIL" == a.getFieldValue("MODE"),
		c = Blockly.C.valueToCode(a, "BOOL", b ? Blockly.C.ORDER_UNARY_PREFIX : Blockly.C.ORDER_NONE) || "false",
		d = Blockly.C.statementToCode(a, "DO");
	d = Blockly.C.addLoopTrap(d, a);
	b && (c = "!" + c);
	return "while (" + c + ") {\n" + d + "}\n"
};
Blockly.C.controls_for = function(a) {
	var b = Blockly.C.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE),
		c = Blockly.C.valueToCode(a, "FROM", Blockly.C.ORDER_ASSIGNMENT) || "0",
		d = Blockly.C.valueToCode(a, "TO", Blockly.C.ORDER_ASSIGNMENT) || "0",
		e = Blockly.C.valueToCode(a, "BY", Blockly.C.ORDER_ASSIGNMENT) || "1",
		f = Blockly.C.statementToCode(a, "DO");
	f = Blockly.C.addLoopTrap(f, a);
	if (Blockly.isNumber(c) && Blockly.isNumber(d) && Blockly.isNumber(e)) {
		var g = Number(c) <= Number(d);
		a = "for (" + b + " = " + c + "; " + b + (g ? " <= " : " >= ") + d + "; " + b;
		b = Math.abs(Number(e));
		a = (1 == b ? a + (g ? "++" : "--") : a + ((g ? " += " : " -= ") + b)) + (") {\n" + f + "}\n")
	}
	else a = "", g = c, c.match(/^\w+$/) || Blockly.isNumber(c) || (g = Blockly.C.variableDB_.getDistinctName(b + "_start", Blockly.Variables.NAME_TYPE), a += "var " + g + " = " + c + ";\n"), c = d, d.match(/^\w+$/) || Blockly.isNumber(d) || (c = Blockly.C.variableDB_.getDistinctName(b + "_end", Blockly.Variables.NAME_TYPE), a += "var " + c + " = " + d + ";\n"), d = Blockly.C.variableDB_.getDistinctName(b +
		"_inc", Blockly.Variables.NAME_TYPE), a += "num " + d + " = ", a = Blockly.isNumber(e) ? a + (Math.abs(e) + ";\n") : a + ("(" + e + ").abs();\n"), a = a + ("if (" + g + " > " + c + ") {\n") + (Blockly.C.INDENT + d + " = -" + d + ";\n"), a += "}\n", a += "for (" + b + " = " + g + "; " + d + " >= 0 ? " + b + " <= " + c + " : " + b + " >= " + c + "; " + b + " += " + d + ") {\n" + f + "}\n";
	return a
};
Blockly.C.controls_forEach = function(a) {
	var b = Blockly.C.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE),
		c = Blockly.C.valueToCode(a, "LIST", Blockly.C.ORDER_ASSIGNMENT) || "[]",
		d = Blockly.C.statementToCode(a, "DO");
	d = Blockly.C.addLoopTrap(d, a);
	return "for (var " + b + " in " + c + ") {\n" + d + "}\n"
};
Blockly.C.controls_flow_statements = function(a) {
	var b = "";
	Blockly.C.STATEMENT_PREFIX && (b += Blockly.C.injectId(Blockly.C.STATEMENT_PREFIX, a));
	Blockly.C.STATEMENT_SUFFIX && (b += Blockly.C.injectId(Blockly.C.STATEMENT_SUFFIX, a));
	if (Blockly.C.STATEMENT_PREFIX) {
		var c = Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);
		c && !c.suppressPrefixSuffix && (b += Blockly.C.injectId(Blockly.C.STATEMENT_PREFIX, c))
	}
	switch (a.getFieldValue("FLOW")) {
		case "BREAK":
			return b + "break;\n";
		case "CONTINUE":
			return b + "continue;\n"
	}
	throw Error("Unknown flow statement.");
};
Blockly.C.math = {};
Blockly.C.addReservedWords("Math");
Blockly.C.math_number = function(a) {
	a = Number(a.getFieldValue("NUM"));
	if (Infinity == a) {
		a = "double.infinity";
		var b = Blockly.C.ORDER_UNARY_POSTFIX
	}
	else -Infinity == a ? (a = "-double.infinity", b = Blockly.C.ORDER_UNARY_PREFIX) : b = 0 > a ? Blockly.C.ORDER_UNARY_PREFIX : Blockly.C.ORDER_ATOMIC;
	return [a, b]
};
Blockly.C.math_arithmetic = function(a) {
	var b = {
			ADD: [" + ", Blockly.C.ORDER_ADDITIVE],
			MINUS: [" - ", Blockly.C.ORDER_ADDITIVE],
			MULTIPLY: [" * ", Blockly.C.ORDER_MULTIPLICATIVE],
			DIVIDE: [" / ", Blockly.C.ORDER_MULTIPLICATIVE],
			POWER: [null, Blockly.C.ORDER_NONE]
		} [a.getFieldValue("OP")],
		c = b[0];
	b = b[1];
	var d = Blockly.C.valueToCode(a, "A", b) || "0";
	a = Blockly.C.valueToCode(a, "B", b) || "0";
	return c ? [d + c + a, b] : (Blockly.C.definitions_.import_C_math = "#include <cmath>", ["Math.pow(" + d + ", " +
		a + ")", Blockly.C.ORDER_UNARY_POSTFIX
	])
};
Blockly.C.math_single = function(a) {
	var b = a.getFieldValue("OP");
	if ("NEG" == b) return a = Blockly.C.valueToCode(a, "NUM", Blockly.C.ORDER_UNARY_PREFIX) || "0", "-" == a[0] && (a = " " + a), ["-" + a, Blockly.C.ORDER_UNARY_PREFIX];
	Blockly.C.definitions_.import_C_math = "#include <cmath>";
	a = "ABS" == b || "ROUND" == b.substring(0, 5) ? Blockly.C.valueToCode(a, "NUM", Blockly.C.ORDER_UNARY_POSTFIX) || "0" : "SIN" == b || "COS" == b || "TAN" == b ? Blockly.C.valueToCode(a, "NUM", Blockly.C.ORDER_MULTIPLICATIVE) || "0" :
		Blockly.C.valueToCode(a, "NUM", Blockly.C.ORDER_NONE) || "0";
	switch (b) {
		case "ABS":
			var c = a + ".abs()";
			break;
		case "ROOT":
			c = "Math.sqrt(" + a + ")";
			break;
		case "LN":
			c = "Math.log(" + a + ")";
			break;
		case "EXP":
			c = "Math.exp(" + a + ")";
			break;
		case "POW10":
			c = "Math.pow(10," + a + ")";
			break;
		case "ROUND":
			c = a + ".round()";
			break;
		case "ROUNDUP":
			c = a + ".ceil()";
			break;
		case "ROUNDDOWN":
			c = a + ".floor()";
			break;
		case "SIN":
			c = "Math.sin(" + a + " / 180 * Math.pi)";
			break;
		case "COS":
			c = "Math.cos(" + a + " / 180 * Math.pi)";
			break;
		case "TAN":
			c = "Math.tan(" + a +
				" / 180 * Math.pi)"
	}
	if (c) return [c, Blockly.C.ORDER_UNARY_POSTFIX];
	switch (b) {
		case "LOG10":
			c = "Math.log(" + a + ") / Math.log(10)";
			break;
		case "ASIN":
			c = "Math.asin(" + a + ") / Math.pi * 180";
			break;
		case "ACOS":
			c = "Math.acos(" + a + ") / Math.pi * 180";
			break;
		case "ATAN":
			c = "Math.atan(" + a + ") / Math.pi * 180";
			break;
		default:
			throw Error("Unknown math operator: " + b);
	}
	return [c, Blockly.C.ORDER_MULTIPLICATIVE]
};
Blockly.C.math_constant = function(a) {
	var b = {
		PI: ["Math.pi", Blockly.C.ORDER_UNARY_POSTFIX],
		E: ["Math.e", Blockly.C.ORDER_UNARY_POSTFIX],
		GOLDEN_RATIO: ["(1 + Math.sqrt(5)) / 2", Blockly.C.ORDER_MULTIPLICATIVE],
		SQRT2: ["Math.sqrt2", Blockly.C.ORDER_UNARY_POSTFIX],
		SQRT1_2: ["Math.sqrt1_2", Blockly.C.ORDER_UNARY_POSTFIX],
		INFINITY: ["double.infinity", Blockly.C.ORDER_ATOMIC]
	};
	a = a.getFieldValue("CONSTANT");
	"INFINITY" != a && (Blockly.C.definitions_.import_C_math = "#include <cmath>");
	return b[a]
};
Blockly.C.math_number_property = function(a) {
	var b = Blockly.C.valueToCode(a, "NUMBER_TO_CHECK", Blockly.C.ORDER_MULTIPLICATIVE);
	if (!b) return ["false", Blockly.C.ORDER_ATOMIC];
	var c = a.getFieldValue("PROPERTY");
	if ("PRIME" == c) return Blockly.C.definitions_.import_C_math = "#include <cmath>", [Blockly.C.provideFunction_("math_isPrime", ["bool " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(n) {", "  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods", "  if (n == 2 || n == 3) {", "    return true;",
		"  }", "  // False if n is null, negative, is 1, or not whole.", "  // And false if n is divisible by 2 or 3.", "  if (n == null || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {", "    return false;", "  }", "  // Check all the numbers of form 6k +/- 1, up to sqrt(n).", "  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {", "    if (n % (x - 1) == 0 || n % (x + 1) == 0) {", "      return false;", "    }", "  }", "  return true;", "}"
	]) + "(" + b + ")", Blockly.C.ORDER_UNARY_POSTFIX];
	switch (c) {
		case "EVEN":
			var d =
				b + " % 2 == 0";
			break;
		case "ODD":
			d = b + " % 2 == 1";
			break;
		case "WHOLE":
			d = b + " % 1 == 0";
			break;
		case "POSITIVE":
			d = b + " > 0";
			break;
		case "NEGATIVE":
			d = b + " < 0";
			break;
		case "DIVISIBLE_BY":
			a = Blockly.C.valueToCode(a, "DIVISOR", Blockly.C.ORDER_MULTIPLICATIVE);
			if (!a) return ["false", Blockly.C.ORDER_ATOMIC];
			d = b + " % " + a + " == 0"
	}
	return [d, Blockly.C.ORDER_EQUALITY]
};
Blockly.C.math_change = function(a) {
	var b = Blockly.C.valueToCode(a, "DELTA", Blockly.C.ORDER_ADDITIVE) || "0";
	a = Blockly.C.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
	return a + " = (" + a + " is num ? " + a + " : 0) + " + b + ";\n"
};
Blockly.C.math_round = Blockly.C.math_single;
Blockly.C.math_trig = Blockly.C.math_single;
Blockly.C.math_on_list = function(a) {
	var b = a.getFieldValue("OP");
	a = Blockly.C.valueToCode(a, "LIST", Blockly.C.ORDER_NONE) || "[]";
	switch (b) {
		case "SUM":
			b = Blockly.C.provideFunction_("math_sum", ["num " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List<num> myList) {", "  num sumVal = 0;", "  myList.forEach((num entry) {sumVal += entry;});", "  return sumVal;", "}"]);
			b = b + "(" + a + ")";
			break;
		case "MIN":
			Blockly.C.definitions_.import_C_math = "#include <cmath>";
			b = Blockly.C.provideFunction_("math_min",
				["num " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List<num> myList) {", "  if (myList.isEmpty) return null;", "  num minVal = myList[0];", "  myList.forEach((num entry) {minVal = Math.min(minVal, entry);});", "  return minVal;", "}"]);
			b = b + "(" + a + ")";
			break;
		case "MAX":
			Blockly.C.definitions_.import_C_math = "#include <cmath>";
			b = Blockly.C.provideFunction_("math_max", ["num " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List<num> myList) {", "  if (myList.isEmpty) return null;", "  num maxVal = myList[0];",
				"  myList.forEach((num entry) {maxVal = Math.max(maxVal, entry);});", "  return maxVal;", "}"
			]);
			b = b + "(" + a + ")";
			break;
		case "AVERAGE":
			b = Blockly.C.provideFunction_("math_mean", ["num " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List myList) {", "  // First filter list for numbers only.", "  List localList = new List.from(myList);", "  localList.removeWhere((a) => a is! num);", "  if (localList.isEmpty) return null;", "  num sumVal = 0;", "  localList.forEach((var entry) {sumVal += entry;});", "  return sumVal / localList.length;",
				"}"
			]);
			b = b + "(" + a + ")";
			break;
		case "MEDIAN":
			b = Blockly.C.provideFunction_("math_median", ["num " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List myList) {", "  // First filter list for numbers only, then sort, then return middle value", "  // or the average of two middle values if list has an even number of elements.", "  List localList = new List.from(myList);", "  localList.removeWhere((a) => a is! num);", "  if (localList.isEmpty) return null;", "  localList.sort((a, b) => (a - b));", "  int index = localList.length ~/ 2;",
				"  if (localList.length % 2 == 1) {", "    return localList[index];", "  } else {", "    return (localList[index - 1] + localList[index]) / 2;", "  }", "}"
			]);
			b = b + "(" + a + ")";
			break;
		case "MODE":
			Blockly.C.definitions_.import_C_math = "#include <cmath>";
			b = Blockly.C.provideFunction_("math_modes", ["List " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List values) {", "  List modes = [];", "  List counts = [];", "  int maxCount = 0;", "  for (int i = 0; i < values.length; i++) {", "    var value = values[i];",
				"    bool found = false;", "    int thisCount;", "    for (int j = 0; j < counts.length; j++) {", "      if (counts[j][0] == value) {", "        thisCount = ++counts[j][1];", "        found = true;", "        break;", "      }", "    }", "    if (!found) {", "      counts.add([value, 1]);", "      thisCount = 1;", "    }", "    maxCount = Math.max(thisCount, maxCount);", "  }", "  for (int j = 0; j < counts.length; j++) {", "    if (counts[j][1] == maxCount) {", "        modes.add(counts[j][0]);", "    }", "  }", "  return modes;",
				"}"
			]);
			b = b + "(" + a + ")";
			break;
		case "STD_DEV":
			Blockly.C.definitions_.import_C_math = "#include <cmath>";
			b = Blockly.C.provideFunction_("math_standard_deviation", ["num " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List myList) {", "  // First filter list for numbers only.", "  List numbers = new List.from(myList);", "  numbers.removeWhere((a) => a is! num);", "  if (numbers.isEmpty) return null;", "  num n = numbers.length;", "  num sum = 0;", "  numbers.forEach((x) => sum += x);", "  num mean = sum / n;",
				"  num sumSquare = 0;", "  numbers.forEach((x) => sumSquare += Math.pow(x - mean, 2));", "  return Math.sqrt(sumSquare / n);", "}"
			]);
			b = b + "(" + a + ")";
			break;
		case "RANDOM":
			Blockly.C.definitions_.import_C_math = "#include <cmath>";
			b = Blockly.C.provideFunction_("math_random_item", ["dynamic " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(List myList) {", "  int x = new Math.Random().nextInt(myList.length);", "  return myList[x];", "}"]);
			b = b + "(" + a + ")";
			break;
		default:
			throw Error("Unknown operator: " +
				b);
	}
	return [b, Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.math_modulo = function(a) {
	var b = Blockly.C.valueToCode(a, "DIVIDEND", Blockly.C.ORDER_MULTIPLICATIVE) || "0";
	a = Blockly.C.valueToCode(a, "DIVISOR", Blockly.C.ORDER_MULTIPLICATIVE) || "0";
	return [b + " % " + a, Blockly.C.ORDER_MULTIPLICATIVE]
};
Blockly.C.math_constrain = function(a) {
	Blockly.C.definitions_.import_C_math = "#include <cmath>";
	var b = Blockly.C.valueToCode(a, "VALUE", Blockly.C.ORDER_NONE) || "0",
		c = Blockly.C.valueToCode(a, "LOW", Blockly.C.ORDER_NONE) || "0";
	a = Blockly.C.valueToCode(a, "HIGH", Blockly.C.ORDER_NONE) || "double.infinity";
	return ["Math.min(Math.max(" + b + ", " + c + "), " + a + ")", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.math_random_int = function(a) {
	Blockly.C.definitions_.import_C_math = "#include <cmath>";
	var b = Blockly.C.valueToCode(a, "FROM", Blockly.C.ORDER_NONE) || "0";
	a = Blockly.C.valueToCode(a, "TO", Blockly.C.ORDER_NONE) || "0";
	return [Blockly.C.provideFunction_("math_random_int", ["int " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(num a, num b) {", "  if (a > b) {", "    // Swap a and b to ensure a is smaller.", "    num c = a;", "    a = b;", "    b = c;", "  }", "  return new Math.Random().nextInt(b - a + 1) + a;",
		"}"
	]) + "(" + b + ", " + a + ")", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.math_random_float = function(a) {
	Blockly.C.definitions_.import_C_math = "#include <cmath>";
	return ["new Math.Random().nextDouble()", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.math_atan2 = function(a) {
	Blockly.C.definitions_.import_C_math = "#include <cmath>";
	var b = Blockly.C.valueToCode(a, "X", Blockly.C.ORDER_NONE) || "0";
	return ["Math.atan2(" + (Blockly.C.valueToCode(a, "Y", Blockly.C.ORDER_NONE) || "0") + ", " + b + ") / Math.pi * 180", Blockly.C.ORDER_MULTIPLICATIVE]
};
Blockly.C.procedures = {};
Blockly.C.procedures_defreturn = function(a) {
	var b = Blockly.C.variableDB_.getName(a.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE),
		c = "";
	Blockly.C.STATEMENT_PREFIX && (c += Blockly.C.injectId(Blockly.C.STATEMENT_PREFIX, a));
	Blockly.C.STATEMENT_SUFFIX && (c += Blockly.C.injectId(Blockly.C.STATEMENT_SUFFIX, a));
	c && (c = Blockly.C.prefixLines(c, Blockly.C.INDENT));
	var d = "";
	Blockly.C.INFINITE_LOOP_TRAP && (d = Blockly.C.prefixLines(Blockly.C.injectId(Blockly.C.INFINITE_LOOP_TRAP, a),
		Blockly.C.INDENT));
	var e = Blockly.C.statementToCode(a, "STACK"),
		f = Blockly.C.valueToCode(a, "RETURN", Blockly.C.ORDER_NONE) || "",
		g = "";
	e && f && (g = c);
	f && (f = Blockly.C.INDENT + "return " + f + ";\n");
	for (var l = f ? "dynamic" : "void", k = [], h = 0; h < a.arguments_.length; h++) k[h] = Blockly.C.variableDB_.getName(a.arguments_[h], Blockly.Variables.NAME_TYPE);
	c = l + " " + b + "(" + k.join(", ") + ") {\n" + c + d + e + g + f + "}";
	c = Blockly.C.scrub_(a, c);
	Blockly.C.definitions_["%" + b] = c;
	return null
};
Blockly.C.procedures_defnoreturn = Blockly.C.procedures_defreturn;
Blockly.C.procedures_callreturn = function(a) {
	for (var b = Blockly.C.variableDB_.getName(a.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE), c = [], d = 0; d < a.arguments_.length; d++) c[d] = Blockly.C.valueToCode(a, "ARG" + d, Blockly.C.ORDER_NONE) || "null";
	return [b + "(" + c.join(", ") + ")", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.procedures_callnoreturn = function(a) {
	return Blockly.C.procedures_callreturn(a)[0] + ";\n"
};
Blockly.C.procedures_ifreturn = function(a) {
	var b = "if (" + (Blockly.C.valueToCode(a, "CONDITION", Blockly.C.ORDER_NONE) || "false") + ") {\n";
	Blockly.C.STATEMENT_SUFFIX && (b += Blockly.C.prefixLines(Blockly.C.injectId(Blockly.C.STATEMENT_SUFFIX, a), Blockly.C.INDENT));
	a.hasReturnValue_ ? (a = Blockly.C.valueToCode(a, "VALUE", Blockly.C.ORDER_NONE) || "null", b += Blockly.C.INDENT + "return " + a + ";\n") : b += Blockly.C.INDENT + "return;\n";
	return b + "}\n"
};
Blockly.C.texts = {};
Blockly.C.addReservedWords("Html,Math");
Blockly.C.text = function(a) {
	return [Blockly.C.quote_(a.getFieldValue("TEXT")), Blockly.C.ORDER_ATOMIC]
};
Blockly.C.text_multiline = function(a) {
	return [Blockly.C.multiline_quote_(a.getFieldValue("TEXT")), Blockly.C.ORDER_ATOMIC]
};
Blockly.C.text_join = function(a) {
	switch (a.itemCount_) {
		case 0:
			return ["''", Blockly.C.ORDER_ATOMIC];
		case 1:
			return [(Blockly.C.valueToCode(a, "ADD0", Blockly.C.ORDER_UNARY_POSTFIX) || "''") + ".toString()", Blockly.C.ORDER_UNARY_POSTFIX];
		default:
			for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.C.valueToCode(a, "ADD" + c, Blockly.C.ORDER_NONE) || "''";
			a = "[" + b.join(",") + "].join()";
			return [a, Blockly.C.ORDER_UNARY_POSTFIX]
	}
};
Blockly.C.text_append = function(a) {
	var b = Blockly.C.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
	a = Blockly.C.valueToCode(a, "TEXT", Blockly.C.ORDER_NONE) || "''";
	return b + " = [" + b + ", " + a + "].join();\n"
};
Blockly.C.text_length = function(a) {
	return [(Blockly.C.valueToCode(a, "VALUE", Blockly.C.ORDER_UNARY_POSTFIX) || "''") + ".length", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.text_isEmpty = function(a) {
	return [(Blockly.C.valueToCode(a, "VALUE", Blockly.C.ORDER_UNARY_POSTFIX) || "''") + ".isEmpty", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.text_indexOf = function(a) {
	var b = "FIRST" == a.getFieldValue("END") ? "indexOf" : "lastIndexOf",
		c = Blockly.C.valueToCode(a, "FIND", Blockly.C.ORDER_NONE) || "''";
	b = (Blockly.C.valueToCode(a, "VALUE", Blockly.C.ORDER_UNARY_POSTFIX) || "''") + "." + b + "(" + c + ")";
	return a.workspace.options.oneBasedIndex ? [b + " + 1", Blockly.C.ORDER_ADDITIVE] : [b, Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.text_charAt = function(a) {
	var b = a.getFieldValue("WHERE") || "FROM_START",
		c = Blockly.C.valueToCode(a, "VALUE", Blockly.C.ORDER_UNARY_POSTFIX) || "''";
	switch (b) {
		case "FIRST":
			return [c + "[0]", Blockly.C.ORDER_UNARY_POSTFIX];
		case "FROM_START":
			return a = Blockly.C.getAdjusted(a, "AT"), [c + "[" + a + "]", Blockly.C.ORDER_UNARY_POSTFIX];
		case "LAST":
		case "FROM_END":
			return a = Blockly.C.getAdjusted(a, "AT", 1), b = Blockly.C.provideFunction_("text_get_from_end", ["String " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ +
				"(String text, num x) {", "  return text[text.length - x];", "}"
			]), [b + "(" + c + ", " + a + ")", Blockly.C.ORDER_UNARY_POSTFIX];
		case "RANDOM":
			return Blockly.C.definitions_.import_C_math = "#include <cmath>", b = Blockly.C.provideFunction_("text_random_letter", ["String " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(String text) {", "  int x = new Math.Random().nextInt(text.length);", "  return text[x];", "}"]), [b + "(" + c + ")", Blockly.C.ORDER_UNARY_POSTFIX]
	}
	throw Error("Unhandled option (text_charAt).");
};

Blockly.C.text_getSubstring = function(a) {
	var b = Blockly.C.valueToCode(a, "STRING", Blockly.C.ORDER_UNARY_POSTFIX) || "''",
		c = a.getFieldValue("WHERE1"),
		d = a.getFieldValue("WHERE2");
	if ("FIRST" == c && "LAST" == d) a = b;
	else if (b.match(/^'?\w+'?$/) || "FROM_END" != c && "FROM_START" == d) {
		switch (c) {
			case "FROM_START":
				var e = Blockly.C.getAdjusted(a, "AT1");
				break;

			case "FROM_END":
				e = Blockly.C.getAdjusted(a, "AT1", 1, !1, Blockly.C.ORDER_ADDITIVE);
				e = b + ".length - " + e;
				break;
			case "FIRST":
				e = "0";
				break;

			default:
				throw Error("Unhandled option (text_getSubstring).");
		}
		switch (d) {
			case "FROM_START":
				var f = Blockly.C.getAdjusted(a, "AT2", 1);
				break;

			case "FROM_END":
				f = Blockly.C.getAdjusted(a, "AT2", 0, !1, Blockly.C.ORDER_ADDITIVE);
				f = b + ".length - " + f;
				break;

			case "LAST":
				break;

			default:
				throw Error("Unhandled option (text_getSubstring).");
		}
		a = "LAST" == d ? b + ".substring(" + e + ")" : b + ".substring(" + e + ", " + f + ")"
	}
	else e = Blockly.C.getAdjusted(a, "AT1"), f = Blockly.C.getAdjusted(a, "AT2"), a = Blockly.C.provideFunction_("text_get_substring", ["String " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(String text, String where1, 	num at1, String where2, num at2) {", "  int getAt(String where, num at) {", "    if (where == 'FROM_END') {", "      at = text.length - 1 - at;", "    } else if (where == 'FIRST') {", "      at = 0;", "    } else if (where == 'LAST') {", "      at 	= text.length - 1;", "    } else if (where != 'FROM_START') {", "      throw 'Unhandled option (text_getSubstring).';", "    }", "    return at;", "  }", "  at1 = getAt(where1, at1);", "  at2 = getAt(where2, at2) + 1;", "  return text.substring	(at1, at2);", "}"]) + "(" + b + ", '" + c + "', " + e + ", '" + d + "', " + f + ")";
	return [a, Blockly.C.ORDER_UNARY_POSTFIX]
};

Blockly.C.text_changeCase = function(a) {
	var b = {
			UPPERCASE: ".toUpperCase()",
			LOWERCASE: ".toLowerCase()",
			TITLECASE: null
		}
		[a.getFieldValue("CASE")];
	a = Blockly.C.valueToCode(a, "TEXT", b ? Blockly.C.ORDER_UNARY_POSTFIX : Blockly.C.ORDER_NONE) || "''";
	return [b ? a + b : Blockly.C.provideFunction_("text_toTitleCase", ["String " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(String str) {", "  RegExp exp = new RegExp(r'\\b');", "  List<String> list = str.split(exp);", "  final 	title = new StringBuffer();", "  for (String part in list) {", "    if (part.length > 0) {", "      title.write(part[0].toUpperCase());", "      if (part.length > 0) {", "        title.write(part.substring(1).toLowerCase());", "      }", "    }", "  }", "  return 	title.toString();", "}"]) + "(" + a + ")", Blockly.C.ORDER_UNARY_POSTFIX]
};

Blockly.C.text_trim = function(a) {
	var b = {
			LEFT: ".replaceFirst(new RegExp(r'^\\s+'), '')",
			RIGHT: ".replaceFirst(new RegExp(r'\\s+$'), '')",
			BOTH: ".trim()"
		}
		[a.getFieldValue("MODE")];
	return [(Blockly.C.valueToCode(a, "TEXT", Blockly.C.ORDER_UNARY_POSTFIX) || "''") + b, Blockly.C.ORDER_UNARY_POSTFIX]
};

Blockly.C.text_print = function(a) {
	return "printf(" + (Blockly.C.valueToCode(a, "TEXT", Blockly.C.ORDER_NONE) || "\"\"") + ");\n"
};

Blockly.C.text_prompt_ext = function(a) {
	Blockly.C.definitions_.import_C_html = "import 'C:html' as Html;";
	var b = "Html.window.prompt(" + (a.getField("TEXT") ? Blockly.C.quote_(a.getFieldValue("TEXT")) : Blockly.C.valueToCode(a, "TEXT", Blockly.C.ORDER_NONE) || "''") + ", '')";
	"NUMBER" == a.getFieldValue("TYPE") && (Blockly.C.definitions_.import_C_math = "#include <cmath>", b = "Math.parseDouble(" + b + ")");
	return [b, Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.text_prompt = Blockly.C.text_prompt_ext;
Blockly.C.text_count = function(a) {
	var b = Blockly.C.valueToCode(a, "TEXT", Blockly.C.ORDER_UNARY_POSTFIX) || "''";
	a = Blockly.C.valueToCode(a, "SUB", Blockly.C.ORDER_NONE) || "''";
	return [Blockly.C.provideFunction_("text_count", ["int " + Blockly.C.FUNCTION_NAME_PLACEHOLDER_ + "(String haystack, String needle) {", "  if (needle.length == 0) {", "    return haystack.length + 1;", "  }", "  int index = 0;", "  int count = 0;", "  while (index != -1) {", "    index = haystack.indexOf(needle, index);", "    if (index != -1) {",
		"      count++;", "     index += needle.length;", "    }", "  }", "  return count;", "}"
	]) + "(" + b + ", " + a + ")", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.text_replace = function(a) {
	var b = Blockly.C.valueToCode(a, "TEXT", Blockly.C.ORDER_UNARY_POSTFIX) || "''",
		c = Blockly.C.valueToCode(a, "FROM", Blockly.C.ORDER_NONE) || "''";
	a = Blockly.C.valueToCode(a, "TO", Blockly.C.ORDER_NONE) || "''";
	return [b + ".replaceAll(" + c + ", " + a + ")", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.text_reverse = function(a) {
	return ["new String.fromCharCodes(" + (Blockly.C.valueToCode(a, "TEXT", Blockly.C.ORDER_UNARY_POSTFIX) || "''") + ".runes.toList().reversed)", Blockly.C.ORDER_UNARY_POSTFIX]
};
Blockly.C.variables = {};
Blockly.C.variables_get = function(a) {
	return [Blockly.C.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE), Blockly.C.ORDER_ATOMIC]
};
Blockly.C.variables_set = function(a) {
	var b = Blockly.C.valueToCode(a, "VALUE", Blockly.C.ORDER_ASSIGNMENT) || "0";
	return Blockly.C.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE) + " = " + b + ";\n"
};

Blockly.C.variablesDynamic = {};
//Blockly.C.variables_get_dynamic=Blockly.C.variables_get;
//Blockly.C.variables_set_dynamic=Blockly.C.variables_set;